{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "53ae5a01",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:17.142635Z",
     "iopub.status.busy": "2025-08-22T20:46:17.142351Z",
     "iopub.status.idle": "2025-08-22T20:46:19.065222Z",
     "shell.execute_reply": "2025-08-22T20:46:19.063710Z"
    },
    "papermill": {
     "duration": 1.930676,
     "end_time": "2025-08-22T20:46:19.067466",
     "exception": false,
     "start_time": "2025-08-22T20:46:17.136790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e7/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e7/train.csv\n",
      "/kaggle/input/playground-series-s5e7/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4a8874d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:19.077369Z",
     "iopub.status.busy": "2025-08-22T20:46:19.076995Z",
     "iopub.status.idle": "2025-08-22T20:46:19.156056Z",
     "shell.execute_reply": "2025-08-22T20:46:19.155050Z"
    },
    "papermill": {
     "duration": 0.085861,
     "end_time": "2025-08-22T20:46:19.157601",
     "exception": false,
     "start_time": "2025-08-22T20:46:19.071740",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of train data is :->  (18524, 9)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Time_spent_Alone</th>\n",
       "      <th>Stage_fear</th>\n",
       "      <th>Social_event_attendance</th>\n",
       "      <th>Going_outside</th>\n",
       "      <th>Drained_after_socializing</th>\n",
       "      <th>Friends_circle_size</th>\n",
       "      <th>Post_frequency</th>\n",
       "      <th>Personality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>No</td>\n",
       "      <td>15.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Extrovert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>No</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>Extrovert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Introvert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Extrovert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>No</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>No</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Extrovert</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Time_spent_Alone Stage_fear  Social_event_attendance  Going_outside  \\\n",
       "0   0               0.0         No                      6.0            4.0   \n",
       "1   1               1.0         No                      7.0            3.0   \n",
       "2   2               6.0        Yes                      1.0            0.0   \n",
       "3   3               3.0         No                      7.0            3.0   \n",
       "4   4               1.0         No                      4.0            4.0   \n",
       "\n",
       "  Drained_after_socializing  Friends_circle_size  Post_frequency Personality  \n",
       "0                        No                 15.0             5.0   Extrovert  \n",
       "1                        No                 10.0             8.0   Extrovert  \n",
       "2                       NaN                  3.0             0.0   Introvert  \n",
       "3                        No                 11.0             5.0   Extrovert  \n",
       "4                        No                 13.0             NaN   Extrovert  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train=pd.read_csv(\"/kaggle/input/playground-series-s5e7/train.csv\")\n",
    "print(\"Shape of train data is :-> \", df_train.shape)\n",
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8e87db83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:19.169697Z",
     "iopub.status.busy": "2025-08-22T20:46:19.169392Z",
     "iopub.status.idle": "2025-08-22T20:46:19.202441Z",
     "shell.execute_reply": "2025-08-22T20:46:19.200980Z"
    },
    "papermill": {
     "duration": 0.042121,
     "end_time": "2025-08-22T20:46:19.204113",
     "exception": false,
     "start_time": "2025-08-22T20:46:19.161992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of test data is :->  (6175, 8)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Time_spent_Alone</th>\n",
       "      <th>Stage_fear</th>\n",
       "      <th>Social_event_attendance</th>\n",
       "      <th>Going_outside</th>\n",
       "      <th>Drained_after_socializing</th>\n",
       "      <th>Friends_circle_size</th>\n",
       "      <th>Post_frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18524</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>No</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18525</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18526</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>No</td>\n",
       "      <td>15.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18527</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>No</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>18528</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  Time_spent_Alone Stage_fear  Social_event_attendance  Going_outside  \\\n",
       "0  18524               3.0         No                      7.0            4.0   \n",
       "1  18525               NaN        Yes                      0.0            0.0   \n",
       "2  18526               3.0         No                      5.0            6.0   \n",
       "3  18527               3.0         No                      4.0            4.0   \n",
       "4  18528               9.0        Yes                      1.0            2.0   \n",
       "\n",
       "  Drained_after_socializing  Friends_circle_size  Post_frequency  \n",
       "0                        No                  6.0             NaN  \n",
       "1                       Yes                  5.0             1.0  \n",
       "2                        No                 15.0             9.0  \n",
       "3                        No                  5.0             6.0  \n",
       "4                       Yes                  1.0             1.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test=pd.read_csv(\"/kaggle/input/playground-series-s5e7/test.csv\")\n",
    "print(\"Shape of test data is :-> \", df_test.shape)\n",
    "df_test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a046b84",
   "metadata": {
    "papermill": {
     "duration": 0.00459,
     "end_time": "2025-08-22T20:46:19.213704",
     "exception": false,
     "start_time": "2025-08-22T20:46:19.209114",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Doing Feature Engineering and Pre Processing Steps for Train and Test Data Both"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2031b5b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:19.224359Z",
     "iopub.status.busy": "2025-08-22T20:46:19.224002Z",
     "iopub.status.idle": "2025-08-22T20:46:19.231041Z",
     "shell.execute_reply": "2025-08-22T20:46:19.230021Z"
    },
    "papermill": {
     "duration": 0.014038,
     "end_time": "2025-08-22T20:46:19.232486",
     "exception": false,
     "start_time": "2025-08-22T20:46:19.218448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['id', 'Time_spent_Alone', 'Social_event_attendance', 'Going_outside', 'Friends_circle_size', 'Post_frequency']\n",
      "['id', 'Time_spent_Alone', 'Social_event_attendance', 'Going_outside', 'Friends_circle_size', 'Post_frequency']\n"
     ]
    }
   ],
   "source": [
    "col_num_train=[col for col in df_train.columns if df_train[col].dtypes != \"object\"]\n",
    "print(col_num_train)\n",
    "col_num_test=[col for col in df_test.columns if df_test[col].dtypes != \"object\"]\n",
    "print(col_num_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a83f947a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:19.243256Z",
     "iopub.status.busy": "2025-08-22T20:46:19.242968Z",
     "iopub.status.idle": "2025-08-22T20:46:19.267778Z",
     "shell.execute_reply": "2025-08-22T20:46:19.266588Z"
    },
    "papermill": {
     "duration": 0.032038,
     "end_time": "2025-08-22T20:46:19.269332",
     "exception": false,
     "start_time": "2025-08-22T20:46:19.237294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "df_train[col_num_train] = df_train[col_num_train].fillna(0.0)\n",
    "df_test[col_num_test]  = df_test[col_num_test].fillna(0.0)\n",
    "# df_train[col_num_train] = df_train[col_num_train].fillna(df_train[col_num_train].mean())\n",
    "# df_test[col_num_test]  = df_test[col_num_test].fillna(df_test[col_num_test].mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ca36ba6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:19.280250Z",
     "iopub.status.busy": "2025-08-22T20:46:19.279519Z",
     "iopub.status.idle": "2025-08-22T20:46:19.307320Z",
     "shell.execute_reply": "2025-08-22T20:46:19.306202Z"
    },
    "papermill": {
     "duration": 0.035187,
     "end_time": "2025-08-22T20:46:19.309026",
     "exception": false,
     "start_time": "2025-08-22T20:46:19.273839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18524 entries, 0 to 18523\n",
      "Data columns (total 9 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   id                         18524 non-null  int64  \n",
      " 1   Time_spent_Alone           18524 non-null  float64\n",
      " 2   Stage_fear                 16631 non-null  object \n",
      " 3   Social_event_attendance    18524 non-null  float64\n",
      " 4   Going_outside              18524 non-null  float64\n",
      " 5   Drained_after_socializing  17375 non-null  object \n",
      " 6   Friends_circle_size        18524 non-null  float64\n",
      " 7   Post_frequency             18524 non-null  float64\n",
      " 8   Personality                18524 non-null  object \n",
      "dtypes: float64(5), int64(1), object(3)\n",
      "memory usage: 1.3+ MB\n",
      "None\n",
      "#########################################################\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6175 entries, 0 to 6174\n",
      "Data columns (total 8 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   id                         6175 non-null   int64  \n",
      " 1   Time_spent_Alone           6175 non-null   float64\n",
      " 2   Stage_fear                 5577 non-null   object \n",
      " 3   Social_event_attendance    6175 non-null   float64\n",
      " 4   Going_outside              6175 non-null   float64\n",
      " 5   Drained_after_socializing  5743 non-null   object \n",
      " 6   Friends_circle_size        6175 non-null   float64\n",
      " 7   Post_frequency             6175 non-null   float64\n",
      "dtypes: float64(5), int64(1), object(2)\n",
      "memory usage: 386.1+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(df_train.info())\n",
    "print((\"#########################################################\"))\n",
    "print(df_test.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c661420c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:19.320130Z",
     "iopub.status.busy": "2025-08-22T20:46:19.319735Z",
     "iopub.status.idle": "2025-08-22T20:46:19.325976Z",
     "shell.execute_reply": "2025-08-22T20:46:19.324884Z"
    },
    "papermill": {
     "duration": 0.013906,
     "end_time": "2025-08-22T20:46:19.327517",
     "exception": false,
     "start_time": "2025-08-22T20:46:19.313611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Stage_fear', 'Drained_after_socializing']\n",
      "['Stage_fear', 'Drained_after_socializing']\n"
     ]
    }
   ],
   "source": [
    "col_str_train=[col for col in df_train.columns if df_train[col].dtypes == \"object\"]\n",
    "col_str_test=[col for col in df_test.columns if df_test[col].dtypes == \"object\"]\n",
    "print(col_str_test)\n",
    "col_str_train=col_str_train[:-1]\n",
    "print(col_str_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "139bbf83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:19.337729Z",
     "iopub.status.busy": "2025-08-22T20:46:19.337435Z",
     "iopub.status.idle": "2025-08-22T20:46:19.363526Z",
     "shell.execute_reply": "2025-08-22T20:46:19.362392Z"
    },
    "papermill": {
     "duration": 0.033068,
     "end_time": "2025-08-22T20:46:19.365190",
     "exception": false,
     "start_time": "2025-08-22T20:46:19.332122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18524 entries, 0 to 18523\n",
      "Data columns (total 9 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   id                         18524 non-null  int64  \n",
      " 1   Time_spent_Alone           18524 non-null  float64\n",
      " 2   Stage_fear                 18524 non-null  object \n",
      " 3   Social_event_attendance    18524 non-null  float64\n",
      " 4   Going_outside              18524 non-null  float64\n",
      " 5   Drained_after_socializing  18524 non-null  object \n",
      " 6   Friends_circle_size        18524 non-null  float64\n",
      " 7   Post_frequency             18524 non-null  float64\n",
      " 8   Personality                18524 non-null  object \n",
      "dtypes: float64(5), int64(1), object(3)\n",
      "memory usage: 1.3+ MB\n",
      "None\n",
      "#########################################################\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6175 entries, 0 to 6174\n",
      "Data columns (total 8 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   id                         6175 non-null   int64  \n",
      " 1   Time_spent_Alone           6175 non-null   float64\n",
      " 2   Stage_fear                 6175 non-null   object \n",
      " 3   Social_event_attendance    6175 non-null   float64\n",
      " 4   Going_outside              6175 non-null   float64\n",
      " 5   Drained_after_socializing  6175 non-null   object \n",
      " 6   Friends_circle_size        6175 non-null   float64\n",
      " 7   Post_frequency             6175 non-null   float64\n",
      "dtypes: float64(5), int64(1), object(2)\n",
      "memory usage: 386.1+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "df_train[col_str_train]=df_train[col_str_train].fillna(\"No\")\n",
    "df_test[col_str_test]=df_test[col_str_test].fillna(\"No\")\n",
    "print(df_train.info())\n",
    "print((\"#########################################################\"))\n",
    "print(df_test.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e51d165e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:19.375926Z",
     "iopub.status.busy": "2025-08-22T20:46:19.375517Z",
     "iopub.status.idle": "2025-08-22T20:46:20.971892Z",
     "shell.execute_reply": "2025-08-22T20:46:20.971050Z"
    },
    "papermill": {
     "duration": 1.603394,
     "end_time": "2025-08-22T20:46:20.973375",
     "exception": false,
     "start_time": "2025-08-22T20:46:19.369981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OrdinalEncoder  # two handle 2d column\n",
    "oe = OrdinalEncoder(handle_unknown=\"use_encoded_value\", unknown_value=-1)\n",
    "df_train[col_str_train]=oe.fit_transform(df_train[col_str_train])\n",
    "df_test[col_str_test]=oe.fit_transform(df_test[col_str_test])\n",
    "\n",
    "# Seperately handling prediction column \n",
    "\n",
    "df_train[\"Personality\"]=oe.fit_transform(df_train[[\"Personality\"]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "20308142",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:20.983556Z",
     "iopub.status.busy": "2025-08-22T20:46:20.983135Z",
     "iopub.status.idle": "2025-08-22T20:46:20.996312Z",
     "shell.execute_reply": "2025-08-22T20:46:20.995498Z"
    },
    "papermill": {
     "duration": 0.019777,
     "end_time": "2025-08-22T20:46:20.997691",
     "exception": false,
     "start_time": "2025-08-22T20:46:20.977914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Time_spent_Alone</th>\n",
       "      <th>Stage_fear</th>\n",
       "      <th>Social_event_attendance</th>\n",
       "      <th>Going_outside</th>\n",
       "      <th>Drained_after_socializing</th>\n",
       "      <th>Friends_circle_size</th>\n",
       "      <th>Post_frequency</th>\n",
       "      <th>Personality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Time_spent_Alone  Stage_fear  Social_event_attendance  Going_outside  \\\n",
       "0   0               0.0         0.0                      6.0            4.0   \n",
       "1   1               1.0         0.0                      7.0            3.0   \n",
       "2   2               6.0         1.0                      1.0            0.0   \n",
       "3   3               3.0         0.0                      7.0            3.0   \n",
       "4   4               1.0         0.0                      4.0            4.0   \n",
       "\n",
       "   Drained_after_socializing  Friends_circle_size  Post_frequency  Personality  \n",
       "0                        0.0                 15.0             5.0          0.0  \n",
       "1                        0.0                 10.0             8.0          0.0  \n",
       "2                        0.0                  3.0             0.0          1.0  \n",
       "3                        0.0                 11.0             5.0          0.0  \n",
       "4                        0.0                 13.0             0.0          0.0  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ba3660de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:21.008625Z",
     "iopub.status.busy": "2025-08-22T20:46:21.008359Z",
     "iopub.status.idle": "2025-08-22T20:46:21.021491Z",
     "shell.execute_reply": "2025-08-22T20:46:21.020708Z"
    },
    "papermill": {
     "duration": 0.019909,
     "end_time": "2025-08-22T20:46:21.022779",
     "exception": false,
     "start_time": "2025-08-22T20:46:21.002870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Time_spent_Alone</th>\n",
       "      <th>Stage_fear</th>\n",
       "      <th>Social_event_attendance</th>\n",
       "      <th>Going_outside</th>\n",
       "      <th>Drained_after_socializing</th>\n",
       "      <th>Friends_circle_size</th>\n",
       "      <th>Post_frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18524</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18525</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18526</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18527</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>18528</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  Time_spent_Alone  Stage_fear  Social_event_attendance  \\\n",
       "0  18524               3.0         0.0                      7.0   \n",
       "1  18525               0.0         1.0                      0.0   \n",
       "2  18526               3.0         0.0                      5.0   \n",
       "3  18527               3.0         0.0                      4.0   \n",
       "4  18528               9.0         1.0                      1.0   \n",
       "\n",
       "   Going_outside  Drained_after_socializing  Friends_circle_size  \\\n",
       "0            4.0                        0.0                  6.0   \n",
       "1            0.0                        1.0                  5.0   \n",
       "2            6.0                        0.0                 15.0   \n",
       "3            4.0                        0.0                  5.0   \n",
       "4            2.0                        1.0                  1.0   \n",
       "\n",
       "   Post_frequency  \n",
       "0             0.0  \n",
       "1             1.0  \n",
       "2             9.0  \n",
       "3             6.0  \n",
       "4             1.0  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5916d0f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:21.033915Z",
     "iopub.status.busy": "2025-08-22T20:46:21.033583Z",
     "iopub.status.idle": "2025-08-22T20:46:21.864602Z",
     "shell.execute_reply": "2025-08-22T20:46:21.863872Z"
    },
    "papermill": {
     "duration": 0.838831,
     "end_time": "2025-08-22T20:46:21.866783",
     "exception": false,
     "start_time": "2025-08-22T20:46:21.027952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Personality\n",
      "0.0    13699\n",
      "1.0     4825\n",
      "Name: count, dtype: int64\n",
      "Personality\n",
      "0.0    0.739527\n",
      "1.0    0.260473\n",
      "Name: proportion, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "sns.countplot(x=\"Personality\", data=df_train)\n",
    "plt.title(\"Distribution of Personality Classes\")\n",
    "plt.show()\n",
    "\n",
    "# or exact counts\n",
    "print(df_train[\"Personality\"].value_counts())\n",
    "print(df_train[\"Personality\"].value_counts(normalize=True))  # percentage\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0eab699a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:21.878623Z",
     "iopub.status.busy": "2025-08-22T20:46:21.878212Z",
     "iopub.status.idle": "2025-08-22T20:46:22.278813Z",
     "shell.execute_reply": "2025-08-22T20:46:22.277728Z"
    },
    "papermill": {
     "duration": 0.408358,
     "end_time": "2025-08-22T20:46:22.280442",
     "exception": false,
     "start_time": "2025-08-22T20:46:21.872084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import StratifiedKFold, RandomizedSearchCV\n",
    "from xgboost import XGBClassifier, plot_importance\n",
    "from sklearn.metrics import classification_report, confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e1d3d998",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2025-08-22T20:46:22.292818Z",
     "iopub.status.busy": "2025-08-22T20:46:22.292475Z",
     "iopub.status.idle": "2025-08-22T20:47:13.274900Z",
     "shell.execute_reply": "2025-08-22T20:47:13.273998Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 50.990545,
     "end_time": "2025-08-22T20:47:13.276572",
     "exception": false,
     "start_time": "2025-08-22T20:46:22.286027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Negatives: 13699, Positives: 4825, scale_pos_weight=2.84\n",
      "Fitting 5 folds for each of 30 candidates, totalling 150 fits\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.1388888888888889, max_depth=8, min_child_weight=1, n_estimators=100, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.1388888888888889, max_depth=8, min_child_weight=1, n_estimators=100, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.1388888888888889, max_depth=8, min_child_weight=1, n_estimators=100, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.1388888888888889, max_depth=8, min_child_weight=1, n_estimators=100, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.1388888888888889, max_depth=8, min_child_weight=1, n_estimators=100, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.07444444444444444, max_depth=8, min_child_weight=5, n_estimators=400, subsample=0.7; total time=   0.7s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.07444444444444444, max_depth=8, min_child_weight=5, n_estimators=400, subsample=0.7; total time=   0.7s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.07444444444444444, max_depth=8, min_child_weight=5, n_estimators=400, subsample=0.7; total time=   0.7s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.07444444444444444, max_depth=8, min_child_weight=5, n_estimators=400, subsample=0.7; total time=   0.7s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.07444444444444444, max_depth=8, min_child_weight=5, n_estimators=400, subsample=0.7; total time=   0.7s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.07444444444444444, max_depth=5, min_child_weight=5, n_estimators=400, subsample=0.9; total time=   0.6s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.07444444444444444, max_depth=5, min_child_weight=5, n_estimators=400, subsample=0.9; total time=   0.5s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.07444444444444444, max_depth=5, min_child_weight=5, n_estimators=400, subsample=0.9; total time=   0.5s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.07444444444444444, max_depth=5, min_child_weight=5, n_estimators=400, subsample=0.9; total time=   0.5s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.07444444444444444, max_depth=5, min_child_weight=5, n_estimators=400, subsample=0.9; total time=   0.5s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.5, learning_rate=0.1711111111111111, max_depth=4, min_child_weight=5, n_estimators=400, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.5, learning_rate=0.1711111111111111, max_depth=4, min_child_weight=5, n_estimators=400, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.5, learning_rate=0.1711111111111111, max_depth=4, min_child_weight=5, n_estimators=400, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.5, learning_rate=0.1711111111111111, max_depth=4, min_child_weight=5, n_estimators=400, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.5, learning_rate=0.1711111111111111, max_depth=4, min_child_weight=5, n_estimators=400, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.5, learning_rate=0.3, max_depth=4, min_child_weight=1, n_estimators=200, subsample=0.7; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.5, learning_rate=0.3, max_depth=4, min_child_weight=1, n_estimators=200, subsample=0.7; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.5, learning_rate=0.3, max_depth=4, min_child_weight=1, n_estimators=200, subsample=0.7; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.5, learning_rate=0.3, max_depth=4, min_child_weight=1, n_estimators=200, subsample=0.7; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.5, learning_rate=0.3, max_depth=4, min_child_weight=1, n_estimators=200, subsample=0.7; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.2, learning_rate=0.042222222222222223, max_depth=7, min_child_weight=3, n_estimators=300, subsample=0.7999999999999999; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.2, learning_rate=0.042222222222222223, max_depth=7, min_child_weight=3, n_estimators=300, subsample=0.7999999999999999; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.2, learning_rate=0.042222222222222223, max_depth=7, min_child_weight=3, n_estimators=300, subsample=0.7999999999999999; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.2, learning_rate=0.042222222222222223, max_depth=7, min_child_weight=3, n_estimators=300, subsample=0.7999999999999999; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.2, learning_rate=0.042222222222222223, max_depth=7, min_child_weight=3, n_estimators=300, subsample=0.7999999999999999; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.2677777777777778, max_depth=6, min_child_weight=1, n_estimators=100, subsample=0.9; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.2677777777777778, max_depth=6, min_child_weight=1, n_estimators=100, subsample=0.9; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.2677777777777778, max_depth=6, min_child_weight=1, n_estimators=100, subsample=0.9; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.2677777777777778, max_depth=6, min_child_weight=1, n_estimators=100, subsample=0.9; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.2677777777777778, max_depth=6, min_child_weight=1, n_estimators=100, subsample=0.9; total time=   0.2s\n",
      "[CV] END colsample_bytree=1.0, gamma=0, learning_rate=0.3, max_depth=3, min_child_weight=5, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=1.0, gamma=0, learning_rate=0.3, max_depth=3, min_child_weight=5, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=1.0, gamma=0, learning_rate=0.3, max_depth=3, min_child_weight=5, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=1.0, gamma=0, learning_rate=0.3, max_depth=3, min_child_weight=5, n_estimators=300, subsample=0.9; total time=   0.4s\n",
      "[CV] END colsample_bytree=1.0, gamma=0, learning_rate=0.3, max_depth=3, min_child_weight=5, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.5, learning_rate=0.20333333333333334, max_depth=4, min_child_weight=3, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.5, learning_rate=0.20333333333333334, max_depth=4, min_child_weight=3, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.5, learning_rate=0.20333333333333334, max_depth=4, min_child_weight=3, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.5, learning_rate=0.20333333333333334, max_depth=4, min_child_weight=3, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.5, learning_rate=0.20333333333333334, max_depth=4, min_child_weight=3, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.5, learning_rate=0.10666666666666666, max_depth=4, min_child_weight=3, n_estimators=100, subsample=1.0; total time=   0.1s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.5, learning_rate=0.10666666666666666, max_depth=4, min_child_weight=3, n_estimators=100, subsample=1.0; total time=   0.1s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.5, learning_rate=0.10666666666666666, max_depth=4, min_child_weight=3, n_estimators=100, subsample=1.0; total time=   0.1s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.5, learning_rate=0.10666666666666666, max_depth=4, min_child_weight=3, n_estimators=100, subsample=1.0; total time=   0.1s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.5, learning_rate=0.10666666666666666, max_depth=4, min_child_weight=3, n_estimators=100, subsample=1.0; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.1711111111111111, max_depth=6, min_child_weight=5, n_estimators=200, subsample=1.0; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.1711111111111111, max_depth=6, min_child_weight=5, n_estimators=200, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.1711111111111111, max_depth=6, min_child_weight=5, n_estimators=200, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.1711111111111111, max_depth=6, min_child_weight=5, n_estimators=200, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.1, learning_rate=0.1711111111111111, max_depth=6, min_child_weight=5, n_estimators=200, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.2, learning_rate=0.07444444444444444, max_depth=7, min_child_weight=1, n_estimators=100, subsample=0.9; total time=   0.2s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.2, learning_rate=0.07444444444444444, max_depth=7, min_child_weight=1, n_estimators=100, subsample=0.9; total time=   0.2s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.2, learning_rate=0.07444444444444444, max_depth=7, min_child_weight=1, n_estimators=100, subsample=0.9; total time=   0.2s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.2, learning_rate=0.07444444444444444, max_depth=7, min_child_weight=1, n_estimators=100, subsample=0.9; total time=   0.2s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.2, learning_rate=0.07444444444444444, max_depth=7, min_child_weight=1, n_estimators=100, subsample=0.9; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.1711111111111111, max_depth=8, min_child_weight=1, n_estimators=200, subsample=0.7999999999999999; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.1711111111111111, max_depth=8, min_child_weight=1, n_estimators=200, subsample=0.7999999999999999; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.1711111111111111, max_depth=8, min_child_weight=1, n_estimators=200, subsample=0.7999999999999999; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.1711111111111111, max_depth=8, min_child_weight=1, n_estimators=200, subsample=0.7999999999999999; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.1711111111111111, max_depth=8, min_child_weight=1, n_estimators=200, subsample=0.7999999999999999; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.07444444444444444, max_depth=7, min_child_weight=1, n_estimators=100, subsample=0.7999999999999999; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.07444444444444444, max_depth=7, min_child_weight=1, n_estimators=100, subsample=0.7999999999999999; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.07444444444444444, max_depth=7, min_child_weight=1, n_estimators=100, subsample=0.7999999999999999; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.07444444444444444, max_depth=7, min_child_weight=1, n_estimators=100, subsample=0.7999999999999999; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.07444444444444444, max_depth=7, min_child_weight=1, n_estimators=100, subsample=0.7999999999999999; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.2677777777777778, max_depth=5, min_child_weight=5, n_estimators=100, subsample=0.7999999999999999; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.2677777777777778, max_depth=5, min_child_weight=5, n_estimators=100, subsample=0.7999999999999999; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.2677777777777778, max_depth=5, min_child_weight=5, n_estimators=100, subsample=0.7999999999999999; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.2677777777777778, max_depth=5, min_child_weight=5, n_estimators=100, subsample=0.7999999999999999; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.2677777777777778, max_depth=5, min_child_weight=5, n_estimators=100, subsample=0.7999999999999999; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.1, learning_rate=0.2677777777777778, max_depth=5, min_child_weight=3, n_estimators=400, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.1, learning_rate=0.2677777777777778, max_depth=5, min_child_weight=3, n_estimators=400, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.1, learning_rate=0.2677777777777778, max_depth=5, min_child_weight=3, n_estimators=400, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.1, learning_rate=0.2677777777777778, max_depth=5, min_child_weight=3, n_estimators=400, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.1, learning_rate=0.2677777777777778, max_depth=5, min_child_weight=3, n_estimators=400, subsample=1.0; total time=   0.2s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.042222222222222223, max_depth=4, min_child_weight=5, n_estimators=300, subsample=1.0; total time=   0.3s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.042222222222222223, max_depth=4, min_child_weight=5, n_estimators=300, subsample=1.0; total time=   0.3s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.042222222222222223, max_depth=4, min_child_weight=5, n_estimators=300, subsample=1.0; total time=   0.4s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.042222222222222223, max_depth=4, min_child_weight=5, n_estimators=300, subsample=1.0; total time=   0.3s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.042222222222222223, max_depth=4, min_child_weight=5, n_estimators=300, subsample=1.0; total time=   0.3s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.20333333333333334, max_depth=3, min_child_weight=3, n_estimators=200, subsample=0.7; total time=   0.2s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.20333333333333334, max_depth=3, min_child_weight=3, n_estimators=200, subsample=0.7; total time=   0.2s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.20333333333333334, max_depth=3, min_child_weight=3, n_estimators=200, subsample=0.7; total time=   0.2s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.20333333333333334, max_depth=3, min_child_weight=3, n_estimators=200, subsample=0.7; total time=   0.2s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.1, learning_rate=0.20333333333333334, max_depth=3, min_child_weight=3, n_estimators=200, subsample=0.7; total time=   0.2s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.042222222222222223, max_depth=3, min_child_weight=1, n_estimators=100, subsample=0.7; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.042222222222222223, max_depth=3, min_child_weight=1, n_estimators=100, subsample=0.7; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.042222222222222223, max_depth=3, min_child_weight=1, n_estimators=100, subsample=0.7; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.042222222222222223, max_depth=3, min_child_weight=1, n_estimators=100, subsample=0.7; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.042222222222222223, max_depth=3, min_child_weight=1, n_estimators=100, subsample=0.7; total time=   0.1s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.2677777777777778, max_depth=6, min_child_weight=5, n_estimators=300, subsample=0.7999999999999999; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.2677777777777778, max_depth=6, min_child_weight=5, n_estimators=300, subsample=0.7999999999999999; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.2677777777777778, max_depth=6, min_child_weight=5, n_estimators=300, subsample=0.7999999999999999; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.2677777777777778, max_depth=6, min_child_weight=5, n_estimators=300, subsample=0.7999999999999999; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.2677777777777778, max_depth=6, min_child_weight=5, n_estimators=300, subsample=0.7999999999999999; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.9, gamma=0.1, learning_rate=0.3, max_depth=6, min_child_weight=5, n_estimators=200, subsample=0.7999999999999999; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.9, gamma=0.1, learning_rate=0.3, max_depth=6, min_child_weight=5, n_estimators=200, subsample=0.7999999999999999; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.9, gamma=0.1, learning_rate=0.3, max_depth=6, min_child_weight=5, n_estimators=200, subsample=0.7999999999999999; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.9, gamma=0.1, learning_rate=0.3, max_depth=6, min_child_weight=5, n_estimators=200, subsample=0.7999999999999999; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.9, gamma=0.1, learning_rate=0.3, max_depth=6, min_child_weight=5, n_estimators=200, subsample=0.7999999999999999; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.2, learning_rate=0.07444444444444444, max_depth=4, min_child_weight=1, n_estimators=400, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.2, learning_rate=0.07444444444444444, max_depth=4, min_child_weight=1, n_estimators=400, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.2, learning_rate=0.07444444444444444, max_depth=4, min_child_weight=1, n_estimators=400, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.2, learning_rate=0.07444444444444444, max_depth=4, min_child_weight=1, n_estimators=400, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0.2, learning_rate=0.07444444444444444, max_depth=4, min_child_weight=1, n_estimators=400, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.9, gamma=0.1, learning_rate=0.1711111111111111, max_depth=5, min_child_weight=3, n_estimators=300, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.9, gamma=0.1, learning_rate=0.1711111111111111, max_depth=5, min_child_weight=3, n_estimators=300, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.9, gamma=0.1, learning_rate=0.1711111111111111, max_depth=5, min_child_weight=3, n_estimators=300, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.9, gamma=0.1, learning_rate=0.1711111111111111, max_depth=5, min_child_weight=3, n_estimators=300, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.9, gamma=0.1, learning_rate=0.1711111111111111, max_depth=5, min_child_weight=3, n_estimators=300, subsample=0.7; total time=   0.4s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.2, learning_rate=0.10666666666666666, max_depth=8, min_child_weight=1, n_estimators=300, subsample=0.9; total time=   0.7s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.2, learning_rate=0.10666666666666666, max_depth=8, min_child_weight=1, n_estimators=300, subsample=0.9; total time=   0.6s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.2, learning_rate=0.10666666666666666, max_depth=8, min_child_weight=1, n_estimators=300, subsample=0.9; total time=   0.6s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.2, learning_rate=0.10666666666666666, max_depth=8, min_child_weight=1, n_estimators=300, subsample=0.9; total time=   0.6s\n",
      "[CV] END colsample_bytree=1.0, gamma=0.2, learning_rate=0.10666666666666666, max_depth=8, min_child_weight=1, n_estimators=300, subsample=0.9; total time=   0.6s\n",
      "[CV] END colsample_bytree=0.9, gamma=0, learning_rate=0.3, max_depth=3, min_child_weight=3, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.9, gamma=0, learning_rate=0.3, max_depth=3, min_child_weight=3, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.9, gamma=0, learning_rate=0.3, max_depth=3, min_child_weight=3, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.9, gamma=0, learning_rate=0.3, max_depth=3, min_child_weight=3, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.9, gamma=0, learning_rate=0.3, max_depth=3, min_child_weight=3, n_estimators=300, subsample=0.9; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.1711111111111111, max_depth=7, min_child_weight=3, n_estimators=400, subsample=0.9; total time=   0.6s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.1711111111111111, max_depth=7, min_child_weight=3, n_estimators=400, subsample=0.9; total time=   0.6s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.1711111111111111, max_depth=7, min_child_weight=3, n_estimators=400, subsample=0.9; total time=   0.6s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.1711111111111111, max_depth=7, min_child_weight=3, n_estimators=400, subsample=0.9; total time=   0.6s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.1711111111111111, max_depth=7, min_child_weight=3, n_estimators=400, subsample=0.9; total time=   0.6s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.10666666666666666, max_depth=8, min_child_weight=5, n_estimators=400, subsample=1.0; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.10666666666666666, max_depth=8, min_child_weight=5, n_estimators=400, subsample=1.0; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.10666666666666666, max_depth=8, min_child_weight=5, n_estimators=400, subsample=1.0; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.10666666666666666, max_depth=8, min_child_weight=5, n_estimators=400, subsample=1.0; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.10666666666666666, max_depth=8, min_child_weight=5, n_estimators=400, subsample=1.0; total time=   0.3s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.3, max_depth=6, min_child_weight=1, n_estimators=300, subsample=1.0; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.3, max_depth=6, min_child_weight=1, n_estimators=300, subsample=1.0; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.3, max_depth=6, min_child_weight=1, n_estimators=300, subsample=1.0; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.3, max_depth=6, min_child_weight=1, n_estimators=300, subsample=1.0; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.3, max_depth=6, min_child_weight=1, n_estimators=300, subsample=1.0; total time=   0.4s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.01, max_depth=6, min_child_weight=5, n_estimators=400, subsample=0.7999999999999999; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.01, max_depth=6, min_child_weight=5, n_estimators=400, subsample=0.7999999999999999; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.01, max_depth=6, min_child_weight=5, n_estimators=400, subsample=0.7999999999999999; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.01, max_depth=6, min_child_weight=5, n_estimators=400, subsample=0.7999999999999999; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7, gamma=0, learning_rate=0.01, max_depth=6, min_child_weight=5, n_estimators=400, subsample=0.7999999999999999; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.20333333333333334, max_depth=5, min_child_weight=1, n_estimators=400, subsample=0.9; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.20333333333333334, max_depth=5, min_child_weight=1, n_estimators=400, subsample=0.9; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.20333333333333334, max_depth=5, min_child_weight=1, n_estimators=400, subsample=0.9; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.20333333333333334, max_depth=5, min_child_weight=1, n_estimators=400, subsample=0.9; total time=   0.5s\n",
      "[CV] END colsample_bytree=0.7999999999999999, gamma=0.2, learning_rate=0.20333333333333334, max_depth=5, min_child_weight=1, n_estimators=400, subsample=0.9; total time=   0.5s\n",
      "Best parameters found: {'subsample': 0.7, 'n_estimators': 100, 'min_child_weight': 1, 'max_depth': 3, 'learning_rate': 0.042222222222222223, 'gamma': 0.2, 'colsample_bytree': 0.7999999999999999}\n",
      "Best CV F1 score: 0.9394417661219844\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x600 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from xgboost import XGBClassifier, plot_importance\n",
    "from sklearn.model_selection import RandomizedSearchCV, StratifiedKFold\n",
    "from sklearn.metrics import make_scorer, f1_score\n",
    "\n",
    "\n",
    "X = df_train.drop(columns=[\"Personality\", \"id\"])\n",
    "y = df_train[\"Personality\"]\n",
    "\n",
    "neg, pos = (y == 0).sum(), (y == 1).sum()\n",
    "scale_pos_weight = neg / pos\n",
    "print(f\"Negatives: {neg}, Positives: {pos}, scale_pos_weight={scale_pos_weight:.2f}\")\n",
    "\n",
    "\n",
    "xgb = XGBClassifier(\n",
    "    eval_metric=\"logloss\",\n",
    "    use_label_encoder=False,\n",
    "    random_state=42,\n",
    "    scale_pos_weight=scale_pos_weight\n",
    ")\n",
    "\n",
    "param_dist = {\n",
    "    \"n_estimators\": [100, 200, 300, 400],\n",
    "    \"max_depth\": [3, 4, 5, 6, 7, 8],\n",
    "    \"learning_rate\": np.linspace(0.01, 0.3, 10),\n",
    "    \"subsample\": np.linspace(0.7, 1.0, 4),\n",
    "    \"colsample_bytree\": np.linspace(0.7, 1.0, 4),\n",
    "    \"gamma\": [0, 0.1, 0.2, 0.5],\n",
    "    \"min_child_weight\": [1, 3, 5]\n",
    "}\n",
    "\n",
    "cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# -----------------------------\n",
    "# 3. Hyperparameter search\n",
    "# -----------------------------\n",
    "f1_scorer = make_scorer(f1_score)  # safer than \"f1\"\n",
    "\n",
    "random_search = RandomizedSearchCV(\n",
    "    estimator=xgb,\n",
    "    param_distributions=param_dist,\n",
    "    n_iter=30,  # number of random combos to try\n",
    "    scoring=f1_scorer,\n",
    "    cv=cv,\n",
    "    random_state=42,\n",
    "    n_jobs=1,   # ✅ fix BrokenProcessPool issue\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "random_search.fit(X, y)\n",
    "\n",
    "print(\"Best parameters found:\", random_search.best_params_)\n",
    "print(\"Best CV F1 score:\", random_search.best_score_)\n",
    "\n",
    "# -----------------------------\n",
    "# 4. Train final model\n",
    "# -----------------------------\n",
    "best_model = random_search.best_estimator_\n",
    "best_model.fit(X, y)\n",
    "\n",
    "# -----------------------------\n",
    "# 5. Feature importance plot\n",
    "# -----------------------------\n",
    "plt.figure(figsize=(10,6))\n",
    "plot_importance(best_model, importance_type=\"weight\", max_num_features=15)\n",
    "plt.title(\"Top 15 Feature Importances\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d76de2b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:47:13.301803Z",
     "iopub.status.busy": "2025-08-22T20:47:13.301434Z",
     "iopub.status.idle": "2025-08-22T20:47:13.906870Z",
     "shell.execute_reply": "2025-08-22T20:47:13.905804Z"
    },
    "papermill": {
     "duration": 0.619117,
     "end_time": "2025-08-22T20:47:13.908346",
     "exception": false,
     "start_time": "2025-08-22T20:47:13.289229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.7, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n",
       "              feature_types=None, gamma=0, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=0.01, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n",
       "              max_leaves=None, min_child_weight=5, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=400,\n",
       "              n_jobs=None, num_parallel_tree=None, random_state=42, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.7, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n",
       "              feature_types=None, gamma=0, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=0.01, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n",
       "              max_leaves=None, min_child_weight=5, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=400,\n",
       "              n_jobs=None, num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.7, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric='logloss',\n",
       "              feature_types=None, gamma=0, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=0.01, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n",
       "              max_leaves=None, min_child_weight=5, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=400,\n",
       "              n_jobs=None, num_parallel_tree=None, random_state=42, ...)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_params = {\n",
    "    'subsample': 0.8,\n",
    "    'n_estimators': 400,\n",
    "    'min_child_weight': 5,\n",
    "    'max_depth': 6,\n",
    "    'learning_rate': 0.01,\n",
    "    'gamma': 0,\n",
    "    'colsample_bytree': 0.7,\n",
    "    'scale_pos_weight': scale_pos_weight,  # keep imbalance handling\n",
    "    'eval_metric': 'logloss',\n",
    "    'use_label_encoder': False,\n",
    "    'random_state': 42\n",
    "}\n",
    "\n",
    "final_model = XGBClassifier(**best_params)\n",
    "final_model.fit(X, y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3162cb0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:47:13.933115Z",
     "iopub.status.busy": "2025-08-22T20:47:13.932723Z",
     "iopub.status.idle": "2025-08-22T20:47:14.623113Z",
     "shell.execute_reply": "2025-08-22T20:47:14.622249Z"
    },
    "papermill": {
     "duration": 0.704745,
     "end_time": "2025-08-22T20:47:14.624355",
     "exception": false,
     "start_time": "2025-08-22T20:47:13.919610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.98      0.98      0.98      2740\n",
      "         1.0       0.94      0.95      0.94       965\n",
      "\n",
      "    accuracy                           0.97      3705\n",
      "   macro avg       0.96      0.96      0.96      3705\n",
      "weighted avg       0.97      0.97      0.97      3705\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_train, X_val, y_train, y_val = train_test_split(\n",
    "    X, y, test_size=0.2, stratify=y, random_state=42\n",
    ")\n",
    "\n",
    "final_model.fit(X_train, y_train)\n",
    "\n",
    "y_val_pred = final_model.predict(X_val)\n",
    "\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_val, y_val_pred))\n",
    "\n",
    "# Confusion Matrix\n",
    "cm = confusion_matrix(y_val, y_val_pred)\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=[0,1], yticklabels=[0,1])\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"True\")\n",
    "plt.title(\"Confusion Matrix\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b850d325",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:47:14.649900Z",
     "iopub.status.busy": "2025-08-22T20:47:14.649567Z",
     "iopub.status.idle": "2025-08-22T20:47:14.656520Z",
     "shell.execute_reply": "2025-08-22T20:47:14.655456Z"
    },
    "papermill": {
     "duration": 0.021998,
     "end_time": "2025-08-22T20:47:14.658133",
     "exception": false,
     "start_time": "2025-08-22T20:47:14.636135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.971120\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "accuracy = accuracy_score(y_val, y_val_pred)\n",
    "print(f\"Accuracy: {accuracy:.6f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ea09aaaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:47:14.683633Z",
     "iopub.status.busy": "2025-08-22T20:47:14.683370Z",
     "iopub.status.idle": "2025-08-22T20:47:14.687485Z",
     "shell.execute_reply": "2025-08-22T20:47:14.686576Z"
    },
    "papermill": {
     "duration": 0.018716,
     "end_time": "2025-08-22T20:47:14.688950",
     "exception": false,
     "start_time": "2025-08-22T20:47:14.670234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Accuracy: 0.971120"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5666178f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:47:14.715437Z",
     "iopub.status.busy": "2025-08-22T20:47:14.715163Z",
     "iopub.status.idle": "2025-08-22T20:47:14.753224Z",
     "shell.execute_reply": "2025-08-22T20:47:14.752615Z"
    },
    "papermill": {
     "duration": 0.05312,
     "end_time": "2025-08-22T20:47:14.755127",
     "exception": false,
     "start_time": "2025-08-22T20:47:14.702007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_test = df_test.drop(columns=[\"id\"])\n",
    "y_test_pred = final_model.predict(X_test)\n",
    "\n",
    "label_map = {0: \"Extrovert\", 1: \"Introvert\"}\n",
    "y_test_pred_str = [label_map[val] for val in y_test_pred]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e1396c0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T20:47:14.780927Z",
     "iopub.status.busy": "2025-08-22T20:47:14.780621Z",
     "iopub.status.idle": "2025-08-22T20:47:14.795928Z",
     "shell.execute_reply": "2025-08-22T20:47:14.795062Z"
    },
    "papermill": {
     "duration": 0.029631,
     "end_time": "2025-08-22T20:47:14.797396",
     "exception": false,
     "start_time": "2025-08-22T20:47:14.767765",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Submission file saved as submission.csv\n"
     ]
    }
   ],
   "source": [
    "submission = pd.DataFrame({\n",
    "    \"id\": df_test[\"id\"],\n",
    "    \"Personality\": y_test_pred_str\n",
    "})\n",
    "\n",
    "submission.to_csv(\"Personality_submission.csv\", index=False)\n",
    "print(\"✅ Submission file saved as submission.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf5fcbbd",
   "metadata": {
    "papermill": {
     "duration": 0.011413,
     "end_time": "2025-08-22T20:47:14.820746",
     "exception": false,
     "start_time": "2025-08-22T20:47:14.809333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 12738969,
     "sourceId": 91718,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 63.729407,
   "end_time": "2025-08-22T20:47:15.553080",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-22T20:46:11.823673",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
